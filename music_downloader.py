"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –º—É–∑—ã–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""
import asyncio
import os
import logging
from typing import List, Dict, Optional, Union
from io import BytesIO
import aiohttp
from dotenv import load_dotenv

from youtube_downloader import YouTubeDownloader
from mp3wr_parser import Mp3wrParser
from sefon_parser import SefonParser

load_dotenv()
logger = logging.getLogger(__name__)


class MusicDownloader:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def __init__(self):
        self.youtube = YouTubeDownloader()
        self.sources = ['youtube', 'mp3wr', 'sefon']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YouTube (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é)
        self.youtube_available = True
        proxy = os.getenv('PROXY')
        if not proxy:
            logger.warning("YouTube –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –≤ –†–æ—Å—Å–∏–∏")
    
    async def search(self, query: str, limit: int = 15) -> List[Dict[str, str]]:
        """
        –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        
        Args:
            query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        all_tracks = []
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ YouTube (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if self.youtube_available:
            try:
                logger.info(f"–ü–æ–∏—Å–∫ –≤ YouTube: {query}")
                youtube_tracks = await self.youtube.search(query, limit=8)
                
                for track in youtube_tracks:
                    track['source'] = 'youtube'
                    track['source_emoji'] = 'üì∫'
                    all_tracks.append(track)
                    
                logger.info(f"YouTube: –Ω–∞–π–¥–µ–Ω–æ {len(youtube_tracks)} —Ç—Ä–µ–∫–æ–≤")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ YouTube: {e}")
                self.youtube_available = False
                logger.warning("YouTube –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
        
        # –ü–æ–∏—Å–∫ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
        try:
            # MP3WR
            logger.info(f"–ü–æ–∏—Å–∫ –≤ MP3WR: {query}")
            async with Mp3wrParser() as mp3wr:
                mp3wr_tracks = await mp3wr.search(query, limit=4)
                
                for track in mp3wr_tracks:
                    track['source'] = 'mp3wr'
                    track['source_emoji'] = 'üéµ'
                    all_tracks.append(track)
                    
                logger.info(f"MP3WR: –Ω–∞–π–¥–µ–Ω–æ {len(mp3wr_tracks)} —Ç—Ä–µ–∫–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ MP3WR: {e}")
        
        try:
            # Sefon
            logger.info(f"–ü–æ–∏—Å–∫ –≤ Sefon: {query}")
            async with SefonParser() as sefon:
                sefon_tracks = await sefon.search(query, limit=3)
                
                for track in sefon_tracks:
                    track['source'] = 'sefon'
                    track['source_emoji'] = 'üé∂'
                    all_tracks.append(track)
                    
                logger.info(f"Sefon: –Ω–∞–π–¥–µ–Ω–æ {len(sefon_tracks)} —Ç—Ä–µ–∫–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Sefon: {e}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if len(all_tracks) > limit:
            all_tracks = all_tracks[:limit]
        
        logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_tracks)} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        return all_tracks
    
    async def download_track(self, track: Dict[str, str]) -> Optional[bytes]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        
        Args:
            track: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            
        Returns:
            –ë–∞–π—Ç—ã –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ None
        """
        source = track.get('source', 'youtube')
        
        try:
            if source == 'youtube':
                return await self.youtube.download_track(track['url'])
                
            elif source == 'mp3wr':
                async with Mp3wrParser() as mp3wr:
                    return await mp3wr.download_track(track['url'])
                    
            elif source == 'sefon':
                async with SefonParser() as sefon:
                    return await sefon.download_track(track['track_url'])
            
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ {source}: {e}")
            return None
    
    async def test_sources(self) -> Dict[str, bool]:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        """
        results = {}
        
        # –¢–µ—Å—Ç YouTube
        try:
            test_tracks = await self.youtube.search("test", limit=1)
            results['youtube'] = len(test_tracks) > 0
        except Exception as e:
            logger.error(f"YouTube –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            results['youtube'] = False
        
        # –¢–µ—Å—Ç MP3WR
        try:
            async with Mp3wrParser() as mp3wr:
                test_tracks = await mp3wr.search("test", limit=1)
                results['mp3wr'] = len(test_tracks) > 0
        except Exception as e:
            logger.error(f"MP3WR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            results['mp3wr'] = False
        
        # –¢–µ—Å—Ç Sefon
        try:
            async with SefonParser() as sefon:
                test_tracks = await sefon.search("test", limit=1)
                results['sefon'] = len(test_tracks) > 0
        except Exception as e:
            logger.error(f"Sefon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            results['sefon'] = False
        
        return results
